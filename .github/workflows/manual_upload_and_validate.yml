name: Manual Upload & Validate

on:
  workflow_dispatch:

jobs:
  validate-and-upload:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          # Avoid attempting to initialize submodules (the repo contains references
          # to a local path in .gitmodules that can break the runner).
          submodules: false
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: List repository files (debug)
        run: |
          echo "Listing repo root"
          ls -la
          echo "Listing server dir"
          ls -la server || true
      - name: Install server deps
        run: |
          # Switch into server directory explicitly to avoid working-directory mismatches
          cd server
          # Use npm ci when a lockfile exists (clean CI installs). Fall back to
          # npm install when no lockfile is present (avoids npm ci failures).
          if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
            npm ci
          else
            npm install
          fi
      - name: Validate envs
        # Expose the repository secrets into the step environment so the validator
        # can detect the Firebase credentials the repo already has (e.g. FIREBASE_ACCOUNT_JSON)
        env:
          FIREBASE_SERVICE_ACCOUNT_JSON: ${{ secrets.FIREBASE_ACCOUNT_JSON }}
          FIREBASE_SERVICE_ACCOUNT_BASE64: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_BASE64 }}
          FIREBASE_SECRET_NAME: ${{ secrets.FIREBASE_SECRET_NAME }}
        run: |
          cd server
          node ./scripts/validate_envs.js
      - name: Setup gcloud (authenticate)
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.FIREBASE_PROJECT_ID }}

      - name: Upload firebase secret (if available)
        # Map secrets into environment variables and decide at runtime whether to upload.
        env:
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
          FIREBASE_ACCOUNT_JSON: ${{ secrets.FIREBASE_ACCOUNT_JSON }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_SECRET_NAME: ${{ secrets.FIREBASE_SECRET_NAME }}
        run: |
          echo "Checking for required secrets before attempting upload..."
          if [ -z "$GCP_SA_KEY" ] || [ -z "$FIREBASE_ACCOUNT_JSON" ] || [ -z "$FIREBASE_PROJECT_ID" ]; then
            echo "Required secrets missing; skipping upload step."
            exit 0
          fi
          echo "Preparing to upload firebase secret via gcloud..."
          echo "$GCP_SA_KEY" > /tmp/sa.json
          echo "$FIREBASE_ACCOUNT_JSON" > /tmp/firebase.json
          gcloud auth activate-service-account --key-file=/tmp/sa.json
          gcloud config set project "$FIREBASE_PROJECT_ID"
          SECRET_NAME=${FIREBASE_SECRET_NAME:-'firebase-service-account'}
          if ! gcloud secrets describe "$SECRET_NAME" >/dev/null 2>&1; then
            gcloud secrets create "$SECRET_NAME" --replication-policy="automatic"
          fi
          gcloud secrets versions add "$SECRET_NAME" --data-file=/tmp/firebase.json
